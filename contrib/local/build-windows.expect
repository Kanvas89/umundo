#!/usr/bin/expect

set timeout 600
set UMUNDO_BUILD_HOST $::env(UMUNDO_BUILD_HOST)
set UMUNDO_BUILD_ARCH $::env(UMUNDO_BUILD_ARCH)
set UMUNDO_COMPILER_VER $::env(UMUNDO_COMPILER_VER)
set UMUNDO_VCVARSALL $::env(UMUNDO_VCVARSALL)
set UMUNO_PROTOBUF_ROOT $::env(UMUNO_PROTOBUF_ROOT)
set BUILD_TESTS $::env(BUILD_TESTS)

set local_prompt {sradomski$ }
set initial_remote_prompt "C*>"
# the default windows prompt is hard to recognize
set remote_prompt "easy_to_recognize"

eval spawn ping -c1 ${UMUNDO_BUILD_HOST}.local.
expect "cannot resolve"  { puts "Host ${UMUNDO_BUILD_HOST}.local. not found"; exit } \
       -re $local_prompt { }

##############################
# prepare and deploy archive

eval cd ~/Documents/TK/Code/

# check age of archive against modification date
eval spawn find ./umundo -newer umundo-win.zip
set redeploy 0;
expect {
	"find:*No such file" { set redeploy 1; }
	".expect\r\n"        { set redeploy 0; }
	".cpp\r\n"           { set redeploy 1; }
	"package\r\n"        { set redeploy 1; }
	".h\r\n"             { set redeploy 1; }
	"CMakeLists.txt\r\n" { set redeploy 1; }
	eof                  { }
}
set redeploy 1;

puts $redeploy;

if {$redeploy} {
	eval spawn rm umundo-win.zip
	expect -re $local_prompt

	eval spawn \
		zip -r umundo-win.zip umundo/ --exclude \
		__\* \
		umundo/contrib\* \
		umundo/.git/\* \
		umundo/build\* \
		umundo/installer/umundo\* \
		umundo/package\* \
		umundo/docs/html\* \
		umundo/examples/ios\*
	expect eof

	eval spawn \
		zip -r umundo-win.zip \
			umundo/contrib/cmake \
			umundo/contrib/snippets \
			umundo/contrib/csharp \
			umundo/contrib/java \
			umundo/contrib/prebuilt/include \
			umundo/package/cross-compiled/android
	expect eof

	eval spawn \
		zip -r umundo-win.zip \
			umundo/contrib/prebuilt
	expect eof

	eval spawn scp -4 umundo-win.zip sradomski@${UMUNDO_BUILD_HOST}.local:\\umundo-win.zip
	expect {
		"ETA"              { exp_continue }
		"The authenticity" { send "yes\n"; exp_continue; }
		timeout            { puts "Timeout when uploading source code"; exit;  }
		-re $local_prompt  { }
	}
}

##############################
# ssh into remote host

eval spawn ssh -4 sradomski@${UMUNDO_BUILD_HOST}.local.
expect {
	timeout            { puts "Timeout when connecting to windows"; exit;  }
	"The authenticity" { send "yes\n"; }
	-re $local_prompt  { puts "Could not connect to remote host"; exit; }
	-re $initial_remote_prompt { }
}

send "set prompt=easy_to_recognize \r"
expect -re $remote_prompt

# unpack archive if required
if {$redeploy} {
	send "rmdir \/S \/Q umundo\r"
	expect -re $remote_prompt

	send "unzip umundo-win.zip\r"
	expect "umundo/"          { exp_continue } \
	       -re $remote_prompt { }

}

# setup directories
send "rmdir \/S \/Q build-umundo-${UMUNDO_COMPILER_VER}-${UMUNDO_BUILD_ARCH}\r"
expect -re $remote_prompt
send "mkdir build-umundo-${UMUNDO_COMPILER_VER}-${UMUNDO_BUILD_ARCH}\r"
expect -re $remote_prompt
send "cd build-umundo-${UMUNDO_COMPILER_VER}-${UMUNDO_BUILD_ARCH}\r"
expect -re $remote_prompt

##############################
# start cmd.exe and prepare for compiling
# send "cmd\n"
# expect -re $cmd_prompt

# "c:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat"
# send "\"c:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\vcvarsall.bat x86_amd64\"\n"
send "${UMUNDO_VCVARSALL}\r"
expect -re $remote_prompt

##############################
# compile in debug configuration

send \
	"\"cmake.exe\" -G \"NMake Makefiles\" \
	-DCMAKE_BUILD_TYPE=Debug \
	-DBUILD_SHARED_LIBS=OFF \
	-DBUILD_TESTS=${BUILD_TESTS} \
	-DDIST_PREPARE=ON \
	-DCMAKE_VERBOSE_MAKEFILE=OFF \
	-DPROTOBUF_SRC_ROOT_FOLDER=\"${UMUNO_PROTOBUF_ROOT}\" \
	..\\umundo\r"
expect -re $remote_prompt

send "nmake\r"
expect {
	"Building" { exp_continue; }
	"Linking" { exp_continue; }
	"fatal error"      { exit }
  -re $remote_prompt      { }
}

send "nmake java VERBOSE=1\r"
expect {
	"Building" { exp_continue; }
	"Linking" { exp_continue; }
	"fatal error"      { exit }
  -re $remote_prompt      { }
}

send "nmake csharp\r"
expect {
	"Building" { exp_continue; }
	"Linking" { exp_continue; }
	"fatal error"      { exit }
  -re $remote_prompt      { }
}

##############################
# compile in release configuration

send \
	"\"cmake\" -G \"NMake Makefiles\" \
	-DCMAKE_BUILD_TYPE=Release \
	-DBUILD_SHARED_LIBS=OFF \
	-DBUILD_TESTS=${BUILD_TESTS} \
	-DDIST_PREPARE=ON \
	-DPROTOBUF_SRC_ROOT_FOLDER=\"${UMUNO_PROTOBUF_ROOT}\" \
	..\\umundo\r"
expect -re $remote_prompt

send "nmake\n\r"
expect {
	timeout            { puts "Timeout when building"; exit;  }
	"Building" { puts "Building"; exp_continue; }
	"Scanning" { puts "Scanning"; exp_continue; }
	"Linking" { puts "Linking"; exp_continue; }
	"fatal error"      { puts "Dying"; exit; }
  -re $remote_prompt { puts "Continuing";  }
}

send "nmake java\n\r"
expect {
	timeout            { puts "Timeout when building"; exit;  }
	"Building" { puts "Building"; exp_continue; }
	"Scanning" { puts "Scanning"; exp_continue; }
	"Linking" { puts "Linking"; exp_continue; }
	"fatal error"      { puts "Dying"; exit; }
  -re $remote_prompt { puts "Continuing";  }
}

send "nmake csharp\n\r"
expect {
	timeout            { puts "Timeout when building"; exit;  }
	"Building" { puts "Building"; exp_continue; }
	"Scanning" { puts "Scanning"; exp_continue; }
	"Linking" { puts "Linking"; exp_continue; }
	"fatal error"      { puts "Dying"; exit; }
  -re $remote_prompt { puts "Continuing";  }
}

if { [string compare $BUILD_TESTS "ON"] == 0 } {
	send "nmake test\n\r"
	expect {
		timeout            { puts "Timeout when building"; exit;  }
		"Start"            { exp_continue; }
	  -re $remote_prompt { puts "Continuing";  }
	}
}

send "cd ..\r"
expect -re $remote_prompt

send "zip -r win-package.zip umundo\\package\\windows*\r"

send "exit\r"
expect -re $local_prompt
eval cd ~/Documents/TK/Code/

eval spawn "scp epikur-win7-64.local:win-package.zip ."
expect -re $local_prompt
eval spawn "unzip -o win-package.zip"
expect -re $local_prompt
eval spawn "rm win-package.zip"
expect -re $local_prompt

exit
